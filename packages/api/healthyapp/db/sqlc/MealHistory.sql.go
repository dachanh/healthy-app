// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: MealHistory.sql

package dbmodels

import (
	"context"
)

const getMealHistory = `-- name: GetMealHistory :many
SELECT "ID", date, session, user_id, image_url, created_at, updated_at
FROM public."Meal_History" as mh
WHERE mh."user_id" = $1
ORDER BY mh."date" DESC, mh."session" DESC
LIMIT $2 OFFSET $3
`

type GetMealHistoryParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetMealHistory(ctx context.Context, arg GetMealHistoryParams) ([]MealHistory, error) {
	rows, err := q.db.QueryContext(ctx, getMealHistory, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MealHistory{}
	for rows.Next() {
		var i MealHistory
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Session,
			&i.UserID,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMealHistoryBySession = `-- name: GetMealHistoryBySession :many
SELECT "ID", date, session, user_id, image_url, created_at, updated_at FROM public."Meal_History" as mh
WHERE mh."user_id" = $1 AND mh."session" = $2
ORDER BY mh."date" DESC
LIMIT $3 OFFSET $4
`

type GetMealHistoryBySessionParams struct {
	UserID  int32 `json:"user_id"`
	Session int16 `json:"session"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

func (q *Queries) GetMealHistoryBySession(ctx context.Context, arg GetMealHistoryBySessionParams) ([]MealHistory, error) {
	rows, err := q.db.QueryContext(ctx, getMealHistoryBySession,
		arg.UserID,
		arg.Session,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MealHistory{}
	for rows.Next() {
		var i MealHistory
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Session,
			&i.UserID,
			&i.ImageUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
