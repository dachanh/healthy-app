// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: Diary.sql

package dbmodels

import (
	"context"
	"time"
)

const createDiary = `-- name: CreateDiary :one
INSERT INTO public."Diary" (content, user_id) 
VALUES ($1, $2)
RETURNING "ID", content, user_id, created_at, updated_at
`

type CreateDiaryParams struct {
	Content string `json:"content"`
	UserID  int32  `json:"user_id"`
}

func (q *Queries) CreateDiary(ctx context.Context, arg CreateDiaryParams) (Diary, error) {
	row := q.db.QueryRowContext(ctx, createDiary, arg.Content, arg.UserID)
	var i Diary
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserDiary = `-- name: GetUserDiary :many
SELECT d."ID", d."content", d."created_at", d."updated_at"
FROM public."Diary" as d
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserDiaryParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUserDiaryRow struct {
	ID        int32     `json:"ID"`
	Content   string    `json:"content"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) GetUserDiary(ctx context.Context, arg GetUserDiaryParams) ([]GetUserDiaryRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserDiary, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserDiaryRow{}
	for rows.Next() {
		var i GetUserDiaryRow
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
