// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: News.sql

package dbmodels

import (
	"context"
	"time"
)

const listNews = `-- name: ListNews :many
SELECT n."ID", n.title, n.image_url, n.content, n.category_id, n.created_at, n.updated_at, nc.name AS category_name
FROM public."News" as n
INNER JOIN public."News_Category" as nc ON n.category_id = nc."ID"
ORDER BY n."created_at" DESC
LIMIT $1 OFFSET $2
`

type ListNewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListNewsRow struct {
	ID           int32     `json:"ID"`
	Title        string    `json:"title"`
	ImageUrl     string    `json:"image_url"`
	Content      string    `json:"content"`
	CategoryID   int32     `json:"category_id"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]ListNewsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListNewsRow{}
	for rows.Next() {
		var i ListNewsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ImageUrl,
			&i.Content,
			&i.CategoryID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
